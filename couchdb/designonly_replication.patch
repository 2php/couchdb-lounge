diff -Nur -x '*.orig' -x '*~' apache-couchdb-0.9.0/src/couchdb/couch_httpd_misc_handlers.erl apache-couchdb-0.9.0.new/src/couchdb/couch_httpd_misc_handlers.erl
--- apache-couchdb-0.9.0/src/couchdb/couch_httpd_misc_handlers.erl	2009-03-13 15:15:34.000000000 -0700
+++ apache-couchdb-0.9.0.new/src/couchdb/couch_httpd_misc_handlers.erl	2009-08-22 11:20:28.000000000 -0700
@@ -93,7 +93,19 @@
     {Props} = couch_httpd:json_body(Req),
     Source = get_rep_endpoint(Req, proplists:get_value(<<"source">>, Props)),
     Target = get_rep_endpoint(Req, proplists:get_value(<<"target">>, Props)),
-    case couch_rep:replicate(Source, Target) of
+		Options1 = proplists:get_value(<<"options">>, Props),
+		% convert the binary string to a true/false atom
+		DesignOnly = case Options1 of
+			{Options} -> 
+				case proplists:get_value(<<"designonly">>, Options) of
+					<<"true">> -> true;
+					_ -> false
+				end;
+			_ -> 
+				false
+		end,
+
+    case couch_rep:replicate(Source, Target, DesignOnly) of
     {ok, {JsonResults}} ->
         send_json(Req, {[{ok, true} | JsonResults]});
     {error, {Type, Details}} ->
diff -Nur -x '*.orig' -x '*~' apache-couchdb-0.9.0/src/couchdb/couch_rep.erl apache-couchdb-0.9.0.new/src/couchdb/couch_rep.erl
--- apache-couchdb-0.9.0/src/couchdb/couch_rep.erl	2009-03-16 15:04:08.000000000 -0700
+++ apache-couchdb-0.9.0.new/src/couchdb/couch_rep.erl	2009-08-22 11:20:28.000000000 -0700
@@ -15,7 +15,7 @@
 -export([init/1, handle_call/3, handle_cast/2, handle_info/2, terminate/2, 
     code_change/3]).
 
--export([replicate/2]).
+-export([replicate/3]).
 
 -include_lib("couch_db.hrl").
 
@@ -30,12 +30,12 @@
 %%      The supervisor will try to restart the replication in case of any error
 %%      other than shutdown.  Just call this function again to listen for the 
 %%      result of the retry.
-replicate(Source, Target) ->
+replicate(Source, Target, DesignOnly) ->
     
     {ok, HostName} = inet:gethostname(),
     RepId = couch_util:to_hex(
-            erlang:md5(term_to_binary([HostName, Source, Target]))),
-    Args = [?MODULE, [RepId, Source,Target], []],
+            erlang:md5(term_to_binary([HostName, Source, Target, DesignOnly]))),
+    Args = [?MODULE, [RepId, Source,Target, DesignOnly], []],
     
     Replicator = {RepId,
         {gen_server, start_link, Args},
@@ -69,7 +69,7 @@
     end,
     
     case gen_server:call(Server, get_result, infinity) of 
-        retry -> replicate(Source, Target);
+        retry -> replicate(Source, Target, DesignOnly);
         Else -> Else
     end.
 
@@ -88,6 +88,7 @@
     current_seq,
     source,
     target,
+		design_only,
     stats,
     enum_pid,
     docs_buffer = [],
@@ -96,7 +97,7 @@
 }).
 
 
-init([RepId, Source, Target]) ->
+init([RepId, Source, Target, DesignOnly]) ->
     process_flag(trap_exit, true),
     
     {ok, DbSrc, SrcName} = open_db(Source),
@@ -175,6 +176,7 @@
         enum_pid = Pid,
         source = DbSrc,
         target = DbTgt,
+				design_only = DesignOnly,
         stats = Stats
     },
     
@@ -191,6 +193,7 @@
         docs_buffer = Buffer,
         source = Source,
         target = Target,
+				design_only = DesignOnly,
         stats = Stats
     } = State,
 
@@ -198,7 +201,18 @@
     
     %% get document(s)
     {ok, DocResults} = open_doc_revs(Source, Id, Revs, [latest]),
-    Docs = [RevDoc || {ok, RevDoc} <- DocResults],
+    Docs1 = [RevDoc || {ok, RevDoc} <- DocResults],
+    Docs = case DesignOnly of
+		    true ->
+            % filter out ids that are not in range
+            StartKey = <<"_design/">>,
+            EndKey = <<"_design/",255>>,
+            [CurDoc || CurDoc = {doc, Key, _, _, _, _, _} <- Docs1, Key >= StartKey, Key < EndKey];
+        false ->
+            % otherwise sync all docs
+            Docs1
+    end,
+
     ets:update_counter(Stats, docs_read, length(Docs)),
     
     %% save them (maybe in a buffer)
