diff --git a/src/couchdb/couch_rep.erl b/src/couchdb/couch_rep.erl
index 1cd484b..bc80002 100644
--- a/src/couchdb/couch_rep.erl
+++ b/src/couchdb/couch_rep.erl
@@ -164,7 +164,13 @@ handle_call(get_result, From, State) ->
     {noreply, State#state{listeners=[From|Listeners]}}.
 
 handle_cast(do_checkpoint, State) ->
-    {noreply, do_checkpoint(State)};
+    try
+    {noreply, do_checkpoint(State)}
+    catch throw:conflict ->
+    ?LOG_ERROR("checkpoint failure: conflict (are you replicating to "
+            "yourself?)", []),
+    {stop, {checkpoint_failure, conflict}}
+    end;
 
 handle_cast(_Msg, State) ->
     {noreply, State}.
@@ -322,6 +328,27 @@ dbinfo(Db) ->
     {ok, Info} = couch_db:get_db_info(Db),
     Info.
 
+do_restart(State) ->
+    #state{
+        changes_feed = CF,
+        missing_revs = MR,
+        reader = Reader,
+        writer = Writer,
+        source = Source,
+        target = Target
+    } = State,
+    ?LOG_INFO("rebooting ~s -> ~s from last known replication checkpoint",
+              [dbname(Source), dbname(Target)]),
+    Pids = [Writer, Reader, MR, CF],
+    [unlink(Pid) || Pid <- Pids],
+    [exit(Pid, shutdown) || Pid <- Pids],
+    close_db(Target),
+    close_db(Source),
+    {ok, NewState} = init(State#state.init_args),
+    % keep old stats table
+    ets:delete(NewState#state.stats),
+    NewState#state{listeners=State#state.listeners, stats=State#state.stats}.
+
 do_terminate(State) ->
     #state{
         checkpoint_history = CheckpointHistory,
@@ -474,12 +501,12 @@ do_checkpoint(State) ->
         target = Target,
         committed_seq = NewSeqNum,
         start_seq = StartSeqNum,
-        history = OldHistory,
         source_log = SourceLog,
         target_log = TargetLog,
         rep_starttime = ReplicationStartTime,
         src_starttime = SrcInstanceStartTime,
         tgt_starttime = TgtInstanceStartTime,
+        checkpoint_history = CheckpointHistory,
         stats = Stats
     } = State,
     case commit_to_both(Source, Target, NewSeqNum) of
@@ -487,6 +514,10 @@ do_checkpoint(State) ->
         ?LOG_INFO("recording a checkpoint for ~s -> ~s at source update_seq ~p",
             [dbname(Source), dbname(Target), NewSeqNum]),
         SessionId = couch_util:new_uuid(),
+        OldHistory = case CheckpointHistory of
+        nil -> State#state.history;
+        {OldLog} -> proplists:get_value(<<"history">>, OldLog)
+        end,
         NewHistoryEntry = {[
             {<<"session_id">>, SessionId},
             {<<"start_time">>, list_to_binary(ReplicationStartTime)},
@@ -508,7 +539,6 @@ do_checkpoint(State) ->
             {<<"history">>, lists:sublist([NewHistoryEntry | OldHistory], 50)}
         ]},
 
-        try
         {SrcRevPos,SrcRevId} =
             update_local_doc(Source, SourceLog#doc{body=NewRepHistory}),
         {TgtRevPos,TgtRevId} =
@@ -518,28 +548,9 @@ do_checkpoint(State) ->
             checkpoint_history = NewRepHistory,
             source_log = SourceLog#doc{revs={SrcRevPos, [SrcRevId]}},
             target_log = TargetLog#doc{revs={TgtRevPos, [TgtRevId]}}
-        }
-        catch throw:conflict ->
-        ?LOG_ERROR("checkpoint failure: conflict (are you replicating to "
-            "yourself?)", []),
-        State
-        end;
+        };
     _Else ->
-        ?LOG_INFO("rebooting ~s -> ~s from last known replication checkpoint",
-            [dbname(Source), dbname(Target)]),
-        #state{
-            changes_feed = CF,
-            missing_revs = MR,
-            reader = Reader,
-            writer = Writer
-        } = State,
-        Pids = [Writer, Reader, MR, CF],
-        [unlink(Pid) || Pid <- Pids],
-        [exit(Pid, shutdown) || Pid <- Pids],
-        close_db(Target),
-        close_db(Source),
-        {ok, NewState} = init(State#state.init_args),
-        NewState
+        do_restart(State)
     end.
 
 commit_to_both(Source, Target, RequiredSeq) ->
@@ -563,8 +574,7 @@ commit_to_both(Source, Target, RequiredSeq) ->
 ensure_full_commit(#http_db{} = Target) ->
     Req = Target#http_db{
         resource = "_ensure_full_commit",
-        method = post,
-        body = true
+        method = post
     },
     {ResultProps} = couch_rep_httpc:request(Req),
     true = proplists:get_value(<<"ok">>, ResultProps),
@@ -589,7 +599,6 @@ ensure_full_commit(#http_db{} = Source, RequiredSeq) ->
     Req = Source#http_db{
         resource = "_ensure_full_commit",
         method = post,
-        body = true,
         qs = [{seq, RequiredSeq}]
     },
     {ResultProps} = couch_rep_httpc:request(Req),
diff --git a/src/couchdb/couch_rep_reader.erl b/src/couchdb/couch_rep_reader.erl
index 8b75258..3edc1f3 100644
--- a/src/couchdb/couch_rep_reader.erl
+++ b/src/couchdb/couch_rep_reader.erl
@@ -108,6 +108,8 @@ code_change(_OldVsn, State, _Extra) ->
 
 %internal funs
 
+handle_add_docs(_Seq, [], _From, State) ->
+    {reply, ok, State};
 handle_add_docs(Seq, DocsToAdd, From, #state{reply_to=nil} = State) ->
     State1 = update_sequence_lists(Seq, State),
     NewState = State1#state{
@@ -151,9 +153,13 @@ handle_open_remote_doc(Id, Seq, Revs, _, #state{source=#http_db{}} = State) ->
     {_, _Ref} = spawn_document_request(Source, Id, Seq, Revs),
     {reply, ok, State#state{monitor_count = Count+1}}.
 
-handle_monitor_down(normal, #state{pending_doc_request=nil,
+handle_monitor_down(normal, #state{pending_doc_request=nil, reply_to=nil,
         monitor_count=1, complete=waiting_on_monitors} = State) ->
     {noreply, State#state{complete=true, monitor_count=0}};
+handle_monitor_down(normal, #state{pending_doc_request=nil, reply_to=From,
+        monitor_count=1, complete=waiting_on_monitors} = State) ->
+    gen_server:reply(From, {complete, calculate_new_high_seq(State)}),
+    {stop, normal, State#state{complete=true, monitor_count=0}};
 handle_monitor_down(normal, #state{pending_doc_request=nil} = State) ->
     #state{monitor_count = Count} = State,
     {noreply, State#state{monitor_count = Count-1}};

